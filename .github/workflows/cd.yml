name: CD - Publish & Release
on:
  push:
    branches:
      - master

jobs:
  release_npm:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.merged.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org

      - name: Install dependencies
        run: npm ci
      - name: Build library
        run: npm run build:prod

      - name: Get merged branch
        id: merged
        run: |
          # Get the last commit merged into master
          MERGED_BRANCH=$(git log -1 --pretty=%B | grep -oE '(release|hotfix)/[0-9]+\.[0-9]+\.[0-9]+')
          if [ -z "$MERGED_BRANCH" ]; then
            echo "No release or hotfix branch merged. Exiting."
            echo "version=" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "Merged branch: $MERGED_BRANCH"
          VERSION="${MERGED_BRANCH#*/}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        if: steps.merged.outputs.version != ''
        run: |
          npm version ${{ steps.merged.outputs.version }} --no-git-tag-version --allow-same-version

      - name: Commit and push version bump
        if: steps.merged.outputs.version != ''
        run: |
          VERSION=${{ steps.merged.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -am "chore(release): v${VERSION}" || echo "No changes to commit"
          git tag "v${VERSION}"
          git push origin HEAD --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        if: steps.merged.outputs.version != ''
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Upload dist artifact
        if: steps.merged.outputs.version != ''
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/**/*

  build_executables:
    if: needs.release_npm.outputs.version != ''
    needs: release_npm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux-x64, linux-arm64, windows-x64, darwin-x64, darwin-arm64, linux-x64-musl, linux-arm64-musl]

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: dist

      - name: Build executable
        id: build
        run: |
          PLATFORM=$(echo "${{ matrix.target }}" | cut -d "-" -f 1)
          mkdir -p ${{ matrix.target }}
          bun build dist/bin.js --compile --target=bun-${{ matrix.target }} --outfile ${{ matrix.target }}/iconify
          if [[ $PLATFORM == "windows" ]]
          then
            zip -r iconify-${{ matrix.target }}.zip ${{ matrix.target }}
            echo "file=iconify-${{ matrix.target }}.zip" >> $GITHUB_OUTPUT
          else
            tar -czf iconify-${{ matrix.target }}.tar.gz ${{ matrix.target }}
            echo "file=iconify-${{ matrix.target }}.tar.gz" >> $GITHUB_OUTPUT
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: iconify-${{ matrix.target }}
          path: ${{ steps.build.outputs.file }}

  release_gh:
    if: needs.release_npm.outputs.version != ''
    needs: [release_npm, build_executables]
    runs-on: ubuntu-latest
    steps:

      - name: Download all built executables
        uses: actions/download-artifact@v4
        with:
          pattern: iconify-*
          path: ./artifacts
          merge-multiple: true

      - name: Generate checksums
        run: |
          cd artifacts
          sha256sum * > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.release_npm.outputs.version }}
          name: Release v${{ needs.release_npm.outputs.version }}
          generate_release_notes: true
          files: artifacts/**/*