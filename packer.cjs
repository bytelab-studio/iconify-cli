/**
 * This script, `packer.cjs`, is a utility for generating TypeScript files from embeddable asset files.
 * It reads asset files located in the `templates` directory, encodes their content into a Base64 format,
 * and outputs the encoded data as TypeScript files in a user-specified directory (`outDir`). The resulting files
 * are intended for embedding the assets into TypeScript projects in a structured and reusable format.
 *
 * Usage:
 * - Run the script via Node.js with a command-line argument specifying the output directory:
 *   `node packer.cjs <out-dir>`
 *
 * Note:
 * - Autogenerated files should not be manually edited or committed to version control.
 */
const fs = require("fs");
const path = require("path");
const os = require("os");

const outDir = process.argv[2];
if (!outDir) {
    console.log("Out dir is not present (third argv)");
    process.exit(1);
}

const fullOutDir = path.join(__dirname, outDir);

if (!fs.existsSync(fullOutDir) || !fs.statSync(fullOutDir).isDirectory()) {
    console.log(`MKDIR: ${fullOutDir}`);
    fs.mkdirSync(fullOutDir, {recursive: true});
}

function chunkBase64(str, size, prefix) {
    const chunks = [];
    for (let i = 0; i < str.length; i += size) {
        const chunk = str.slice(i, i + size);
        chunks.push(`${i === 0 ? "" : prefix}"${chunk}"${i + size < str.length ? " +" : ""}`);
    }
    return chunks;
}

for (const template of fs.readdirSync(path.join(__dirname, "templates"))) {
    console.log(`PACK: ${template}`);
    const padStart = " ".repeat(21);
    let base64 = fs.readFileSync(path.join(__dirname, "templates", template), "base64").replace(/=+$/, "");
    base64 = chunkBase64(base64, 95, padStart).join(os.EOL);
    const name = template.split(".").slice(0, -1).join(".");
    fs.writeFileSync(path.join(fullOutDir, name + ".ts"), `// This file was autogenerated by packer.cjs\n// Do not modify it or add it to git!\n\nconst data: string = ${base64};\nexport default data;`);
}